{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1468493825061},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1468493825061},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1468493825061},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1468493825061},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1468493825061},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1468493825064},{"_id":"source/_posts/D1-gitbash-user.md","hash":"076ff08098e7801b409973dbc563ea7fcbfff73c","modified":1468573236488},{"_id":"source/_posts/D2-github-pages.md","hash":"35e999b37f9b6bd6a7871ed28758980773ac9528","modified":1468306439652},{"_id":"source/_posts/hello-world.md","hash":"424985721f02f5b9ae084eee6650cf270300d148","modified":1468561263650},{"_id":"source/_posts/text.md","hash":"1b5012abf941c784ad97b71a7898371a20b2a287","modified":1468577043720},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1468493825090},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1468493825095},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1468493825094},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1468493825093},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1468493825094},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1468493825094},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1468493825094},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1468493825102},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1468493825096},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1468493825100},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1468493825123},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1468493825102},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1468493825101},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1468493825106},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1468493825098},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1468493825137},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1468493825137},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1468493825159},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1468493825139},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1468493825148},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1468493825143},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1468493825144},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1468493825144},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1468493825148},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1468493825165},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1468493825149},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1468493825151},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1468493825159},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1468493825156},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1468493825159},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1468493825142},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1468493825156},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1468493825151},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1468493825164},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1468493825164},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1468493825164},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1468493825176},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1468493825165},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1468493825165},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1468493825166},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1468493825191},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1468493825197},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1468493825185},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1468493825211},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1468493825205},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1468493825201},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1468493825201},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1468493825203},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1468493825204},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1468493825199},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1468493825204},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1468493825209},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1468493825209},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1468493825214},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1468493825209},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1468493825210},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1468493825210},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1468493825211},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1468493825211},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1468493825200},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1468493825211},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1468493825211},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1468493825230},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1468493825218},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1468493825214},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1468493825215},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1468493825215},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1468493825216},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1468493825221},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1468493825219},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1468493825222},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1468493825231},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1468493825224}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n# Quick Start\n\n## Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n## Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n## Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n## Deploy to remote sites\n\n```bash\n> $ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n# Quick Start\n\n## Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n## Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n## Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n## Deploy to remote sites\n\n```bash\n> $ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-07-14T10:57:05.050Z","updated":"2016-07-15T05:41:03.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4b8ujc0000z8iyl68m8mci","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h1 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h1><h2 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h2 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h2 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h2 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; $ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h1 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h1><h2 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h2 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h2 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h2 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; $ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"_content":"[TOC]\n\n# GitHub pages 使用教程\n\n## GitHub 与 git 关联\n\n首先安装好 Git Bash ，按步骤将 git 与 GitHub 关联起来\n\n1. 检查 SSH keys 设置\n\n  > $ cd ~/. ssh\n\n  检查本机的ssh密钥，提示 \" No such file or directory \" 则需要生成新的 SSH keys\n\n2. 生成新的 SSH Key\n\n  > $ ssh-keygen -t rsa -C \"xxx@xxxmail.com\"\n\n  一路回车，看到下面的界面，就表明生成成功了\n\n  ```\n  The key fingerprint is:\n  SHA256:deq65ahsK3kXY7xuTo5eIplsJLnKlwJTlHPcxb9v/GQ xxx@xxx.com\n  The key's randomart image is:\n  +---[RSA 2048]----+\n  |   o . o.        |\n  |  + o . .        |\n  | . o     .. .    |\n  |  ..     ..o     |\n  | .o .  .S ..     |\n  |o  = o  =..      |\n  |... B...o+oo  E  |\n  |.o +ooo*+=  +o   |\n  |..o  =*BB... ..  |\n  +----[SHA256]-----+\n  ```\n\n3. 将 SSH keys 添加到 GitHub\n\n  根据上面窗口提示找到 id_rsa.pub 文件，内容复制到 GitHub.com > Personal settings > SSH keys (_New SSH key_)，保存即可。\n\n4. 测试关联是否成功\n\n  > $ ssh -T git@github.com\n\n  对话输入 yes 后，提示如下界面就成功了\n\n  ```\n  Hi xx! You've successfully authenticated, but GitHub does not provide shell access.\n  ```\n\n5. 设置账号信息\n\n  > $ git config --global user.name \"your_name\"\n  > $ git config --global user.email \"your_email@youremail.com\"\n\n  > $ git config --list // 查看git配置信息\n\n\n## 使用 GitHub Pages 搭建博客\n\n  [参见官方介绍](https://pages.github.com/)\n\n1. 创建一个与用户名一致的仓库，如 00mu.github.com 。一个 GitHub 账户只有一个，此仓库也将是你的主页地址\n2. 将仓库 clone 到本地\n3. 跟目录编辑 index.html ，此页面将作为主页\n4. push 到远程仓库\n5. 随后访你的主页即可呈现。\n","source":"_posts/D2-github-pages.md","raw":"[TOC]\n\n# GitHub pages 使用教程\n\n## GitHub 与 git 关联\n\n首先安装好 Git Bash ，按步骤将 git 与 GitHub 关联起来\n\n1. 检查 SSH keys 设置\n\n  > $ cd ~/. ssh\n\n  检查本机的ssh密钥，提示 \" No such file or directory \" 则需要生成新的 SSH keys\n\n2. 生成新的 SSH Key\n\n  > $ ssh-keygen -t rsa -C \"xxx@xxxmail.com\"\n\n  一路回车，看到下面的界面，就表明生成成功了\n\n  ```\n  The key fingerprint is:\n  SHA256:deq65ahsK3kXY7xuTo5eIplsJLnKlwJTlHPcxb9v/GQ xxx@xxx.com\n  The key's randomart image is:\n  +---[RSA 2048]----+\n  |   o . o.        |\n  |  + o . .        |\n  | . o     .. .    |\n  |  ..     ..o     |\n  | .o .  .S ..     |\n  |o  = o  =..      |\n  |... B...o+oo  E  |\n  |.o +ooo*+=  +o   |\n  |..o  =*BB... ..  |\n  +----[SHA256]-----+\n  ```\n\n3. 将 SSH keys 添加到 GitHub\n\n  根据上面窗口提示找到 id_rsa.pub 文件，内容复制到 GitHub.com > Personal settings > SSH keys (_New SSH key_)，保存即可。\n\n4. 测试关联是否成功\n\n  > $ ssh -T git@github.com\n\n  对话输入 yes 后，提示如下界面就成功了\n\n  ```\n  Hi xx! You've successfully authenticated, but GitHub does not provide shell access.\n  ```\n\n5. 设置账号信息\n\n  > $ git config --global user.name \"your_name\"\n  > $ git config --global user.email \"your_email@youremail.com\"\n\n  > $ git config --list // 查看git配置信息\n\n\n## 使用 GitHub Pages 搭建博客\n\n  [参见官方介绍](https://pages.github.com/)\n\n1. 创建一个与用户名一致的仓库，如 00mu.github.com 。一个 GitHub 账户只有一个，此仓库也将是你的主页地址\n2. 将仓库 clone 到本地\n3. 跟目录编辑 index.html ，此页面将作为主页\n4. push 到远程仓库\n5. 随后访你的主页即可呈现。\n","slug":"D2-github-pages","published":1,"date":"2016-07-15T08:59:45.642Z","updated":"2016-07-12T06:53:59.652Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4b8uor0001z8iyk1geuh65","content":"<p>[TOC]</p>\n<h1 id=\"GitHub-pages-使用教程\"><a href=\"#GitHub-pages-使用教程\" class=\"headerlink\" title=\"GitHub pages 使用教程\"></a>GitHub pages 使用教程</h1><h2 id=\"GitHub-与-git-关联\"><a href=\"#GitHub-与-git-关联\" class=\"headerlink\" title=\"GitHub 与 git 关联\"></a>GitHub 与 git 关联</h2><p>首先安装好 Git Bash ，按步骤将 git 与 GitHub 关联起来</p>\n<ol>\n<li><p>检查 SSH keys 设置</p>\n<blockquote>\n<p>$ cd ~/. ssh</p>\n</blockquote>\n<p>检查本机的ssh密钥，提示 “ No such file or directory “ 则需要生成新的 SSH keys</p>\n</li>\n<li><p>生成新的 SSH Key</p>\n<blockquote>\n<p>$ ssh-keygen -t rsa -C “xxx@xxxmail.com”</p>\n</blockquote>\n<p>一路回车，看到下面的界面，就表明生成成功了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">The key fingerprint is:</div><div class=\"line\">SHA256:deq65ahsK3kXY7xuTo5eIplsJLnKlwJTlHPcxb9v/GQ xxx@xxx.com</div><div class=\"line\">The key&apos;s randomart image is:</div><div class=\"line\">+---[RSA 2048]----+</div><div class=\"line\">|   o . o.        |</div><div class=\"line\">|  + o . .        |</div><div class=\"line\">| . o     .. .    |</div><div class=\"line\">|  ..     ..o     |</div><div class=\"line\">| .o .  .S ..     |</div><div class=\"line\">|o  = o  =..      |</div><div class=\"line\">|... B...o+oo  E  |</div><div class=\"line\">|.o +ooo*+=  +o   |</div><div class=\"line\">|..o  =*BB... ..  |</div><div class=\"line\">+----[SHA256]-----+</div></pre></td></tr></table></figure>\n</li>\n<li><p>将 SSH keys 添加到 GitHub</p>\n<p>根据上面窗口提示找到 id_rsa.pub 文件，内容复制到 GitHub.com &gt; Personal settings &gt; SSH keys (<em>New SSH key</em>)，保存即可。</p>\n</li>\n<li><p>测试关联是否成功</p>\n<blockquote>\n<p>$ ssh -T git@github.com</p>\n</blockquote>\n<p>对话输入 yes 后，提示如下界面就成功了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hi xx! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置账号信息</p>\n<blockquote>\n<p>$ git config –global user.name “your_name”<br>$ git config –global user.email “your_email@youremail.com”</p>\n<p>$ git config –list // 查看git配置信息</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"使用-GitHub-Pages-搭建博客\"><a href=\"#使用-GitHub-Pages-搭建博客\" class=\"headerlink\" title=\"使用 GitHub Pages 搭建博客\"></a>使用 GitHub Pages 搭建博客</h2><p>  <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">参见官方介绍</a></p>\n<ol>\n<li>创建一个与用户名一致的仓库，如 00mu.github.com 。一个 GitHub 账户只有一个，此仓库也将是你的主页地址</li>\n<li>将仓库 clone 到本地</li>\n<li>跟目录编辑 index.html ，此页面将作为主页</li>\n<li>push 到远程仓库</li>\n<li>随后访你的主页即可呈现。</li>\n</ol>\n","excerpt":"","more":"<p>[TOC]</p>\n<h1 id=\"GitHub-pages-使用教程\"><a href=\"#GitHub-pages-使用教程\" class=\"headerlink\" title=\"GitHub pages 使用教程\"></a>GitHub pages 使用教程</h1><h2 id=\"GitHub-与-git-关联\"><a href=\"#GitHub-与-git-关联\" class=\"headerlink\" title=\"GitHub 与 git 关联\"></a>GitHub 与 git 关联</h2><p>首先安装好 Git Bash ，按步骤将 git 与 GitHub 关联起来</p>\n<ol>\n<li><p>检查 SSH keys 设置</p>\n<blockquote>\n<p>$ cd ~/. ssh</p>\n</blockquote>\n<p>检查本机的ssh密钥，提示 “ No such file or directory “ 则需要生成新的 SSH keys</p>\n</li>\n<li><p>生成新的 SSH Key</p>\n<blockquote>\n<p>$ ssh-keygen -t rsa -C “xxx@xxxmail.com”</p>\n</blockquote>\n<p>一路回车，看到下面的界面，就表明生成成功了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">The key fingerprint is:</div><div class=\"line\">SHA256:deq65ahsK3kXY7xuTo5eIplsJLnKlwJTlHPcxb9v/GQ xxx@xxx.com</div><div class=\"line\">The key&apos;s randomart image is:</div><div class=\"line\">+---[RSA 2048]----+</div><div class=\"line\">|   o . o.        |</div><div class=\"line\">|  + o . .        |</div><div class=\"line\">| . o     .. .    |</div><div class=\"line\">|  ..     ..o     |</div><div class=\"line\">| .o .  .S ..     |</div><div class=\"line\">|o  = o  =..      |</div><div class=\"line\">|... B...o+oo  E  |</div><div class=\"line\">|.o +ooo*+=  +o   |</div><div class=\"line\">|..o  =*BB... ..  |</div><div class=\"line\">+----[SHA256]-----+</div></pre></td></tr></table></figure>\n</li>\n<li><p>将 SSH keys 添加到 GitHub</p>\n<p>根据上面窗口提示找到 id_rsa.pub 文件，内容复制到 GitHub.com &gt; Personal settings &gt; SSH keys (<em>New SSH key</em>)，保存即可。</p>\n</li>\n<li><p>测试关联是否成功</p>\n<blockquote>\n<p>$ ssh -T git@github.com</p>\n</blockquote>\n<p>对话输入 yes 后，提示如下界面就成功了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hi xx! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置账号信息</p>\n<blockquote>\n<p>$ git config –global user.name “your_name”<br>$ git config –global user.email “your_email@youremail.com”</p>\n<p>$ git config –list // 查看git配置信息</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"使用-GitHub-Pages-搭建博客\"><a href=\"#使用-GitHub-Pages-搭建博客\" class=\"headerlink\" title=\"使用 GitHub Pages 搭建博客\"></a>使用 GitHub Pages 搭建博客</h2><p>  <a href=\"https://pages.github.com/\">参见官方介绍</a></p>\n<ol>\n<li>创建一个与用户名一致的仓库，如 00mu.github.com 。一个 GitHub 账户只有一个，此仓库也将是你的主页地址</li>\n<li>将仓库 clone 到本地</li>\n<li>跟目录编辑 index.html ，此页面将作为主页</li>\n<li>push 到远程仓库</li>\n<li>随后访你的主页即可呈现。</li>\n</ol>\n"},{"title":"初始化git环境","_content":"\n# 初始化git环境\n\n## 安装\n\n- windows平台下载安装 [<https://git-for-windows.github.io/>]\n- `git --help git` git帮助文档\n\n## 设置提交者识别信息\n\n- 设置全局Name和Email地址\n\n  > git config --global user.name \"Your Name\" git config --global user.email \"email@example.com\"\n\n- 也可以给指定项目单独设置信息\n\n  > git config user.name \"Your Name\" git config user.email \"email@example.com\" git config --list 查看配置信息\n\n## 创建工作区域\n\n- mkdir HtmlCode 创建工作区\n- cd HtmlCode 进入文件夹\n- pwd 显示当前目录\n\n## 创建本地仓库\n\n- `git init` 在工作区创建git管理仓库\n- `git clone [url] D://HtmlCode` 克隆远程版本库并更名\n\n# 简约工作流\n\n你的本地仓库由 git 维护的三棵\"树\"组成。第一个是你的「工作目录」，它持有实际文件；第二个是「缓存区（Index）」，临时保存你的改动；最后是「HEAD」，指向你最近一次提交后的结果。\n\n- `git status` 查看当前仓库实时状态\n- `git diff` 查看变更内容\n- `git add .` 指明要追踪文件，把目标文件放入暂存区域\n- `git commit -m \"说明话术\"` 现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库\n- `git push` 推送到远程服务器\n\n# 历史\n\n## 查看提交记录\n\n- `git log` 查看提交历史\n- `git log --oneline`\n- `git reflog` 查看命令历史，以便回到未来的版本\n\n## 清理untracked文件\n\n- `git clean -f` 删除所有 untracked 文件\n- `git clean -fd` 连同 untracked 目录一并删除 _建议删除前加上 -n 预览会删除哪些文件，以免误删_ `git clear -nfd`\n\n## 回退文件\n\n![工作区、版本库、暂存区原理图](git-stage.png)\n\n- `git checkout -- <file1> <file2>` 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动,已添加到缓存区的改动，以及新文件，都不受影响\n- `git checkout -f` 丢弃工作区、缓存区所有修改。清除commit之前的所有修改\n- `git checkout <commitID>` 干净的版本回退，将丢弃工作区、缓存区所有修改\n- `git checkout HEAD <file>` 从最新的版本替换工作区文件\n- `git reset --soft HEAD^` 从最新版本库回退到工作区\n- `git reset --soft <commitID>` 从最新版本库回退到工作区\n\n  ```\n  --soft – 缓存区和工作目录都不会被改变\n  --mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响\n  --hard – 缓存区和工作目录都同步到你指定的提交\n  ```\n\n- `git reset <commit_id>` 在历史版本间回滚，消除commit信息，文件放回工作区\n- `git rm --cached <file1> <file2>` 直接从暂存区删除文件，工作区则不做出改变\n\n# 远程仓库\n\n## 分支管理\n\n- `git fetch –p` 更新分支列表\n- `git branch` 查看当前分支，当前分支前面会标一个「*」\n- `git branch -r` 查看远程分支\n- `git branch -a` 查看所有分支\n- `git branch -va` 查看所有分支+log\n- `git branch <branch>` 创建分支\n- `git checkout <branch>` 切换分支\n- `git checkout -b <branch>` 创建+切换分支\n- `git merge <branch>` 合并某分支到当前分支\n- `git branch -D <branch>` 删除某分支\n\n## 远程分支管理\n\n### 查看远程分支\n\n- `git fetch` 将远程分支信息获取到本地\n- `git branch -r` 查看远程分支 `git fetch`\n- `git branch -ar` 查看本地+远程分支及最后一次log\n\n  #### 从远程分支开新分支\n\n- `git checkout -b <localBranch> <remotes/origin/remoteBranch>` 远程分支映射到本地分支\n\n  #### pull\n\n- `git pull origin <remoteBranch>:<localBranch>` 将远程某分支与指定的本地分支合并\n- `git pull origin <remoteBranch>` 将远程某分支与当前分支合并\n\n  #### push\n\n- `git push <origin> <localBranch>:<remoteBranch>` 本地分支推送到远程分支，如果远程不存在此分支则会被新建\n- `git branch --set-upstream-to=origin/<branch>` 本地当前分支与远程分支建立追踪关系\n- `git branch -vv` 查看追踪关系\n- `git push <origin>` 如果当前分支与远程分支存在追踪关系，则可直接push到主机\n- `git push` 如果当前分支有且只有一个追踪分支，那么主机名亦可省略\n- `git push -u origin <branch>` 将本地分支推送到远程分支同时指定默认主机，之后不用加任何参数直接使用 `git push`\n\n- > git branch -D branch git push origin :remoteBranch\n\n  推送时省略本地分支则会删除指定的远程的分支 *注意不要省略`:`前的空格\n\n# git flow\n\n**HotFix** 及 **紧急上线** 流程参照沙洲邮件\n\n## 紧急上线\n\n1. `git checkout -b bug_xxx remotes/origin/master` 从远程master分支创建bug_分支（切换分支时建议关闭VS）\n2. 本地开发-完成 （新资源通常需要包含进VS项目中）\n3. 无法获取时，请先保存本地代码 `git stash`\n4. `git pull origin master` 拉取最新代码到本地\n5. 将 `stash` 的代码 `git stash pop` 恢复到工作区\n6. `git add .` `git commit -m \"话术\"` commit 本次更改，不是自己更改的文件不要提交\n7. `git push -u origin bug_xxx` 推送本分支到远程作为一个远程新分支\n8. [打开服务器网站](https://tfsgit.tujia.com/tfs/Root/_git/tujia/pullrequests)，发起「pull request」,将 _bug_xxx_ 合并到 _master_\n9. 合并时再次 review 对比代码确认下都是自己提交。如有冲突等，解决冲突后push&pullRequest，敦促版本管理员处理\n10. 合并结束后前往[BVT部署](http://deploy.fvt.tujia.com/EmergentRequest)\n11. 测试无误删除服务器bug_xxx分支\n12. PS. 切换分支的时候建议关闭VS\n\n## HotFix\n\n见沙洲邮件↓\n\n```\n0   接到在vNext上开发feature_1功能的任务\n1   将源代码当前分支切换到vNext上   Git checkout vNext\n2   拉取最新vNext分支 Git pull origin vNext\n3   从本地vNext上创建feature_1分支  Git branch vNext_featue_1 vNext\n4   切换到feature_1分支上 Git checkout vNext_feature_1\n5   本地完成开发，提交到feature_1分支   Git commit\n6   推送本地feature_1分支到服务器 Git push –u origin vNext_feature_1\n7   打开服务器网站，发起pull request请求\n8   选择从feature_1分支合并到vNext分支\n9   管理员审批拉取请求\n\n10  看到自己的拉取请求已完成\n11  删除远程feature_1分支 Git push origin :vNext_feature_1\n12  到部署网站上申请部署fvt测试\n13  协助测试完成fvt测试\n9->9.1  如果管理员发现合并冲突，拉取请求被拒绝\n10.1    切换到vNext分支  Git checkout vNext\n11.1    获取最新vNext信息 Git pull origin vNext\n12.1    切换到feature_1分支  Git checkout vNext_feature_1\n13.1    本地合并vNext和feature_1 Git merge vNext\n14.1    提交合并结果  Git commit\n15.1    重复6~13步骤\n13->13.2    如测试发现有bug， fvt测试不通过\n14.2    重复1~13步骤\n```\n\n# 解决 pullRequest 冲突\n\neg. vNext_promotion 合并到 vNext 时冲突\n\n- 首先，你将需要确保 vNext_promotion 和 vNext 分支是最新的: git fetch origin git checkout -b vNext_promotion origin/vNext_promotion\n- 接下来，将 vNext 中的更改合并到 vNext_promotion 中，并解决冲突: git checkout vNext_promotion git merge origin/vNext\n- 然后，在生成和测试代码后，用最新的更改更新拉取请求: git push origin vNext_promotion 返回此处，以完成拉取请求git\n\n[@咪醤](mailto:zzb0b0@126.com)\n","source":"_posts/D1-gitbash-user.md","raw":"---\ntitle: 初始化git环境\n---\n\n# 初始化git环境\n\n## 安装\n\n- windows平台下载安装 [<https://git-for-windows.github.io/>]\n- `git --help git` git帮助文档\n\n## 设置提交者识别信息\n\n- 设置全局Name和Email地址\n\n  > git config --global user.name \"Your Name\" git config --global user.email \"email@example.com\"\n\n- 也可以给指定项目单独设置信息\n\n  > git config user.name \"Your Name\" git config user.email \"email@example.com\" git config --list 查看配置信息\n\n## 创建工作区域\n\n- mkdir HtmlCode 创建工作区\n- cd HtmlCode 进入文件夹\n- pwd 显示当前目录\n\n## 创建本地仓库\n\n- `git init` 在工作区创建git管理仓库\n- `git clone [url] D://HtmlCode` 克隆远程版本库并更名\n\n# 简约工作流\n\n你的本地仓库由 git 维护的三棵\"树\"组成。第一个是你的「工作目录」，它持有实际文件；第二个是「缓存区（Index）」，临时保存你的改动；最后是「HEAD」，指向你最近一次提交后的结果。\n\n- `git status` 查看当前仓库实时状态\n- `git diff` 查看变更内容\n- `git add .` 指明要追踪文件，把目标文件放入暂存区域\n- `git commit -m \"说明话术\"` 现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库\n- `git push` 推送到远程服务器\n\n# 历史\n\n## 查看提交记录\n\n- `git log` 查看提交历史\n- `git log --oneline`\n- `git reflog` 查看命令历史，以便回到未来的版本\n\n## 清理untracked文件\n\n- `git clean -f` 删除所有 untracked 文件\n- `git clean -fd` 连同 untracked 目录一并删除 _建议删除前加上 -n 预览会删除哪些文件，以免误删_ `git clear -nfd`\n\n## 回退文件\n\n![工作区、版本库、暂存区原理图](git-stage.png)\n\n- `git checkout -- <file1> <file2>` 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动,已添加到缓存区的改动，以及新文件，都不受影响\n- `git checkout -f` 丢弃工作区、缓存区所有修改。清除commit之前的所有修改\n- `git checkout <commitID>` 干净的版本回退，将丢弃工作区、缓存区所有修改\n- `git checkout HEAD <file>` 从最新的版本替换工作区文件\n- `git reset --soft HEAD^` 从最新版本库回退到工作区\n- `git reset --soft <commitID>` 从最新版本库回退到工作区\n\n  ```\n  --soft – 缓存区和工作目录都不会被改变\n  --mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响\n  --hard – 缓存区和工作目录都同步到你指定的提交\n  ```\n\n- `git reset <commit_id>` 在历史版本间回滚，消除commit信息，文件放回工作区\n- `git rm --cached <file1> <file2>` 直接从暂存区删除文件，工作区则不做出改变\n\n# 远程仓库\n\n## 分支管理\n\n- `git fetch –p` 更新分支列表\n- `git branch` 查看当前分支，当前分支前面会标一个「*」\n- `git branch -r` 查看远程分支\n- `git branch -a` 查看所有分支\n- `git branch -va` 查看所有分支+log\n- `git branch <branch>` 创建分支\n- `git checkout <branch>` 切换分支\n- `git checkout -b <branch>` 创建+切换分支\n- `git merge <branch>` 合并某分支到当前分支\n- `git branch -D <branch>` 删除某分支\n\n## 远程分支管理\n\n### 查看远程分支\n\n- `git fetch` 将远程分支信息获取到本地\n- `git branch -r` 查看远程分支 `git fetch`\n- `git branch -ar` 查看本地+远程分支及最后一次log\n\n  #### 从远程分支开新分支\n\n- `git checkout -b <localBranch> <remotes/origin/remoteBranch>` 远程分支映射到本地分支\n\n  #### pull\n\n- `git pull origin <remoteBranch>:<localBranch>` 将远程某分支与指定的本地分支合并\n- `git pull origin <remoteBranch>` 将远程某分支与当前分支合并\n\n  #### push\n\n- `git push <origin> <localBranch>:<remoteBranch>` 本地分支推送到远程分支，如果远程不存在此分支则会被新建\n- `git branch --set-upstream-to=origin/<branch>` 本地当前分支与远程分支建立追踪关系\n- `git branch -vv` 查看追踪关系\n- `git push <origin>` 如果当前分支与远程分支存在追踪关系，则可直接push到主机\n- `git push` 如果当前分支有且只有一个追踪分支，那么主机名亦可省略\n- `git push -u origin <branch>` 将本地分支推送到远程分支同时指定默认主机，之后不用加任何参数直接使用 `git push`\n\n- > git branch -D branch git push origin :remoteBranch\n\n  推送时省略本地分支则会删除指定的远程的分支 *注意不要省略`:`前的空格\n\n# git flow\n\n**HotFix** 及 **紧急上线** 流程参照沙洲邮件\n\n## 紧急上线\n\n1. `git checkout -b bug_xxx remotes/origin/master` 从远程master分支创建bug_分支（切换分支时建议关闭VS）\n2. 本地开发-完成 （新资源通常需要包含进VS项目中）\n3. 无法获取时，请先保存本地代码 `git stash`\n4. `git pull origin master` 拉取最新代码到本地\n5. 将 `stash` 的代码 `git stash pop` 恢复到工作区\n6. `git add .` `git commit -m \"话术\"` commit 本次更改，不是自己更改的文件不要提交\n7. `git push -u origin bug_xxx` 推送本分支到远程作为一个远程新分支\n8. [打开服务器网站](https://tfsgit.tujia.com/tfs/Root/_git/tujia/pullrequests)，发起「pull request」,将 _bug_xxx_ 合并到 _master_\n9. 合并时再次 review 对比代码确认下都是自己提交。如有冲突等，解决冲突后push&pullRequest，敦促版本管理员处理\n10. 合并结束后前往[BVT部署](http://deploy.fvt.tujia.com/EmergentRequest)\n11. 测试无误删除服务器bug_xxx分支\n12. PS. 切换分支的时候建议关闭VS\n\n## HotFix\n\n见沙洲邮件↓\n\n```\n0   接到在vNext上开发feature_1功能的任务\n1   将源代码当前分支切换到vNext上   Git checkout vNext\n2   拉取最新vNext分支 Git pull origin vNext\n3   从本地vNext上创建feature_1分支  Git branch vNext_featue_1 vNext\n4   切换到feature_1分支上 Git checkout vNext_feature_1\n5   本地完成开发，提交到feature_1分支   Git commit\n6   推送本地feature_1分支到服务器 Git push –u origin vNext_feature_1\n7   打开服务器网站，发起pull request请求\n8   选择从feature_1分支合并到vNext分支\n9   管理员审批拉取请求\n\n10  看到自己的拉取请求已完成\n11  删除远程feature_1分支 Git push origin :vNext_feature_1\n12  到部署网站上申请部署fvt测试\n13  协助测试完成fvt测试\n9->9.1  如果管理员发现合并冲突，拉取请求被拒绝\n10.1    切换到vNext分支  Git checkout vNext\n11.1    获取最新vNext信息 Git pull origin vNext\n12.1    切换到feature_1分支  Git checkout vNext_feature_1\n13.1    本地合并vNext和feature_1 Git merge vNext\n14.1    提交合并结果  Git commit\n15.1    重复6~13步骤\n13->13.2    如测试发现有bug， fvt测试不通过\n14.2    重复1~13步骤\n```\n\n# 解决 pullRequest 冲突\n\neg. vNext_promotion 合并到 vNext 时冲突\n\n- 首先，你将需要确保 vNext_promotion 和 vNext 分支是最新的: git fetch origin git checkout -b vNext_promotion origin/vNext_promotion\n- 接下来，将 vNext 中的更改合并到 vNext_promotion 中，并解决冲突: git checkout vNext_promotion git merge origin/vNext\n- 然后，在生成和测试代码后，用最新的更改更新拉取请求: git push origin vNext_promotion 返回此处，以完成拉取请求git\n\n[@咪醤](mailto:zzb0b0@126.com)\n","slug":"D1-gitbash-user","published":1,"date":"2016-07-15T05:48:02.265Z","updated":"2016-07-15T09:00:36.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4b8uoz0002z8iyv19sqgaw","content":"<h1 id=\"初始化git环境\"><a href=\"#初始化git环境\" class=\"headerlink\" title=\"初始化git环境\"></a>初始化git环境</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>windows平台下载安装 [<a href=\"https://git-for-windows.github.io/\" target=\"_blank\" rel=\"external\">https://git-for-windows.github.io/</a>]</li>\n<li><code>git --help git</code> git帮助文档</li>\n</ul>\n<h2 id=\"设置提交者识别信息\"><a href=\"#设置提交者识别信息\" class=\"headerlink\" title=\"设置提交者识别信息\"></a>设置提交者识别信息</h2><ul>\n<li><p>设置全局Name和Email地址</p>\n<blockquote>\n<p>git config –global user.name “Your Name” git config –global user.email “email@example.com”</p>\n</blockquote>\n</li>\n<li><p>也可以给指定项目单独设置信息</p>\n<blockquote>\n<p>git config user.name “Your Name” git config user.email “email@example.com” git config –list 查看配置信息</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"创建工作区域\"><a href=\"#创建工作区域\" class=\"headerlink\" title=\"创建工作区域\"></a>创建工作区域</h2><ul>\n<li>mkdir HtmlCode 创建工作区</li>\n<li>cd HtmlCode 进入文件夹</li>\n<li>pwd 显示当前目录</li>\n</ul>\n<h2 id=\"创建本地仓库\"><a href=\"#创建本地仓库\" class=\"headerlink\" title=\"创建本地仓库\"></a>创建本地仓库</h2><ul>\n<li><code>git init</code> 在工作区创建git管理仓库</li>\n<li><code>git clone [url] D://HtmlCode</code> 克隆远程版本库并更名</li>\n</ul>\n<h1 id=\"简约工作流\"><a href=\"#简约工作流\" class=\"headerlink\" title=\"简约工作流\"></a>简约工作流</h1><p>你的本地仓库由 git 维护的三棵”树”组成。第一个是你的「工作目录」，它持有实际文件；第二个是「缓存区（Index）」，临时保存你的改动；最后是「HEAD」，指向你最近一次提交后的结果。</p>\n<ul>\n<li><code>git status</code> 查看当前仓库实时状态</li>\n<li><code>git diff</code> 查看变更内容</li>\n<li><code>git add .</code> 指明要追踪文件，把目标文件放入暂存区域</li>\n<li><code>git commit -m &quot;说明话术&quot;</code> 现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库</li>\n<li><code>git push</code> 推送到远程服务器</li>\n</ul>\n<h1 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h1><h2 id=\"查看提交记录\"><a href=\"#查看提交记录\" class=\"headerlink\" title=\"查看提交记录\"></a>查看提交记录</h2><ul>\n<li><code>git log</code> 查看提交历史</li>\n<li><code>git log --oneline</code></li>\n<li><code>git reflog</code> 查看命令历史，以便回到未来的版本</li>\n</ul>\n<h2 id=\"清理untracked文件\"><a href=\"#清理untracked文件\" class=\"headerlink\" title=\"清理untracked文件\"></a>清理untracked文件</h2><ul>\n<li><code>git clean -f</code> 删除所有 untracked 文件</li>\n<li><code>git clean -fd</code> 连同 untracked 目录一并删除 <em>建议删除前加上 -n 预览会删除哪些文件，以免误删</em> <code>git clear -nfd</code></li>\n</ul>\n<h2 id=\"回退文件\"><a href=\"#回退文件\" class=\"headerlink\" title=\"回退文件\"></a>回退文件</h2><p><img src=\"git-stage.png\" alt=\"工作区、版本库、暂存区原理图\"></p>\n<ul>\n<li><code>git checkout -- &lt;file1&gt; &lt;file2&gt;</code> 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动,已添加到缓存区的改动，以及新文件，都不受影响</li>\n<li><code>git checkout -f</code> 丢弃工作区、缓存区所有修改。清除commit之前的所有修改</li>\n<li><code>git checkout &lt;commitID&gt;</code> 干净的版本回退，将丢弃工作区、缓存区所有修改</li>\n<li><code>git checkout HEAD &lt;file&gt;</code> 从最新的版本替换工作区文件</li>\n<li><code>git reset --soft HEAD^</code> 从最新版本库回退到工作区</li>\n<li><p><code>git reset --soft &lt;commitID&gt;</code> 从最新版本库回退到工作区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">--soft – 缓存区和工作目录都不会被改变</div><div class=\"line\">--mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响</div><div class=\"line\">--hard – 缓存区和工作目录都同步到你指定的提交</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>git reset &lt;commit_id&gt;</code> 在历史版本间回滚，消除commit信息，文件放回工作区</p>\n</li>\n<li><code>git rm --cached &lt;file1&gt; &lt;file2&gt;</code> 直接从暂存区删除文件，工作区则不做出改变</li>\n</ul>\n<h1 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h1><h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><ul>\n<li><code>git fetch –p</code> 更新分支列表</li>\n<li><code>git branch</code> 查看当前分支，当前分支前面会标一个「*」</li>\n<li><code>git branch -r</code> 查看远程分支</li>\n<li><code>git branch -a</code> 查看所有分支</li>\n<li><code>git branch -va</code> 查看所有分支+log</li>\n<li><code>git branch &lt;branch&gt;</code> 创建分支</li>\n<li><code>git checkout &lt;branch&gt;</code> 切换分支</li>\n<li><code>git checkout -b &lt;branch&gt;</code> 创建+切换分支</li>\n<li><code>git merge &lt;branch&gt;</code> 合并某分支到当前分支</li>\n<li><code>git branch -D &lt;branch&gt;</code> 删除某分支</li>\n</ul>\n<h2 id=\"远程分支管理\"><a href=\"#远程分支管理\" class=\"headerlink\" title=\"远程分支管理\"></a>远程分支管理</h2><h3 id=\"查看远程分支\"><a href=\"#查看远程分支\" class=\"headerlink\" title=\"查看远程分支\"></a>查看远程分支</h3><ul>\n<li><code>git fetch</code> 将远程分支信息获取到本地</li>\n<li><code>git branch -r</code> 查看远程分支 <code>git fetch</code></li>\n<li><p><code>git branch -ar</code> 查看本地+远程分支及最后一次log</p>\n<h4 id=\"从远程分支开新分支\"><a href=\"#从远程分支开新分支\" class=\"headerlink\" title=\"从远程分支开新分支\"></a>从远程分支开新分支</h4></li>\n<li><p><code>git checkout -b &lt;localBranch&gt; &lt;remotes/origin/remoteBranch&gt;</code> 远程分支映射到本地分支</p>\n<h4 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"pull\"></a>pull</h4></li>\n<li><p><code>git pull origin &lt;remoteBranch&gt;:&lt;localBranch&gt;</code> 将远程某分支与指定的本地分支合并</p>\n</li>\n<li><p><code>git pull origin &lt;remoteBranch&gt;</code> 将远程某分支与当前分支合并</p>\n<h4 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h4></li>\n<li><p><code>git push &lt;origin&gt; &lt;localBranch&gt;:&lt;remoteBranch&gt;</code> 本地分支推送到远程分支，如果远程不存在此分支则会被新建</p>\n</li>\n<li><code>git branch --set-upstream-to=origin/&lt;branch&gt;</code> 本地当前分支与远程分支建立追踪关系</li>\n<li><code>git branch -vv</code> 查看追踪关系</li>\n<li><code>git push &lt;origin&gt;</code> 如果当前分支与远程分支存在追踪关系，则可直接push到主机</li>\n<li><code>git push</code> 如果当前分支有且只有一个追踪分支，那么主机名亦可省略</li>\n<li><p><code>git push -u origin &lt;branch&gt;</code> 将本地分支推送到远程分支同时指定默认主机，之后不用加任何参数直接使用 <code>git push</code></p>\n</li>\n<li><blockquote>\n<p>git branch -D branch git push origin :remoteBranch</p>\n</blockquote>\n<p>推送时省略本地分支则会删除指定的远程的分支 *注意不要省略<code>:</code>前的空格</p>\n</li>\n</ul>\n<h1 id=\"git-flow\"><a href=\"#git-flow\" class=\"headerlink\" title=\"git flow\"></a>git flow</h1><p><strong>HotFix</strong> 及 <strong>紧急上线</strong> 流程参照沙洲邮件</p>\n<h2 id=\"紧急上线\"><a href=\"#紧急上线\" class=\"headerlink\" title=\"紧急上线\"></a>紧急上线</h2><ol>\n<li><code>git checkout -b bug_xxx remotes/origin/master</code> 从远程master分支创建bug_分支（切换分支时建议关闭VS）</li>\n<li>本地开发-完成 （新资源通常需要包含进VS项目中）</li>\n<li>无法获取时，请先保存本地代码 <code>git stash</code></li>\n<li><code>git pull origin master</code> 拉取最新代码到本地</li>\n<li>将 <code>stash</code> 的代码 <code>git stash pop</code> 恢复到工作区</li>\n<li><code>git add .</code> <code>git commit -m &quot;话术&quot;</code> commit 本次更改，不是自己更改的文件不要提交</li>\n<li><code>git push -u origin bug_xxx</code> 推送本分支到远程作为一个远程新分支</li>\n<li><a href=\"https://tfsgit.tujia.com/tfs/Root/_git/tujia/pullrequests\" target=\"_blank\" rel=\"external\">打开服务器网站</a>，发起「pull request」,将 _bug<em>xxx</em> 合并到 <em>master</em></li>\n<li>合并时再次 review 对比代码确认下都是自己提交。如有冲突等，解决冲突后push&amp;pullRequest，敦促版本管理员处理</li>\n<li>合并结束后前往<a href=\"http://deploy.fvt.tujia.com/EmergentRequest\" target=\"_blank\" rel=\"external\">BVT部署</a></li>\n<li>测试无误删除服务器bug_xxx分支</li>\n<li>PS. 切换分支的时候建议关闭VS</li>\n</ol>\n<h2 id=\"HotFix\"><a href=\"#HotFix\" class=\"headerlink\" title=\"HotFix\"></a>HotFix</h2><p>见沙洲邮件↓</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">0   接到在vNext上开发feature_1功能的任务</div><div class=\"line\">1   将源代码当前分支切换到vNext上   Git checkout vNext</div><div class=\"line\">2   拉取最新vNext分支 Git pull origin vNext</div><div class=\"line\">3   从本地vNext上创建feature_1分支  Git branch vNext_featue_1 vNext</div><div class=\"line\">4   切换到feature_1分支上 Git checkout vNext_feature_1</div><div class=\"line\">5   本地完成开发，提交到feature_1分支   Git commit</div><div class=\"line\">6   推送本地feature_1分支到服务器 Git push –u origin vNext_feature_1</div><div class=\"line\">7   打开服务器网站，发起pull request请求</div><div class=\"line\">8   选择从feature_1分支合并到vNext分支</div><div class=\"line\">9   管理员审批拉取请求</div><div class=\"line\"></div><div class=\"line\">10  看到自己的拉取请求已完成</div><div class=\"line\">11  删除远程feature_1分支 Git push origin :vNext_feature_1</div><div class=\"line\">12  到部署网站上申请部署fvt测试</div><div class=\"line\">13  协助测试完成fvt测试</div><div class=\"line\">9-&gt;9.1  如果管理员发现合并冲突，拉取请求被拒绝</div><div class=\"line\">10.1    切换到vNext分支  Git checkout vNext</div><div class=\"line\">11.1    获取最新vNext信息 Git pull origin vNext</div><div class=\"line\">12.1    切换到feature_1分支  Git checkout vNext_feature_1</div><div class=\"line\">13.1    本地合并vNext和feature_1 Git merge vNext</div><div class=\"line\">14.1    提交合并结果  Git commit</div><div class=\"line\">15.1    重复6~13步骤</div><div class=\"line\">13-&gt;13.2    如测试发现有bug， fvt测试不通过</div><div class=\"line\">14.2    重复1~13步骤</div></pre></td></tr></table></figure>\n<h1 id=\"解决-pullRequest-冲突\"><a href=\"#解决-pullRequest-冲突\" class=\"headerlink\" title=\"解决 pullRequest 冲突\"></a>解决 pullRequest 冲突</h1><p>eg. vNext_promotion 合并到 vNext 时冲突</p>\n<ul>\n<li>首先，你将需要确保 vNext_promotion 和 vNext 分支是最新的: git fetch origin git checkout -b vNext_promotion origin/vNext_promotion</li>\n<li>接下来，将 vNext 中的更改合并到 vNext_promotion 中，并解决冲突: git checkout vNext_promotion git merge origin/vNext</li>\n<li>然后，在生成和测试代码后，用最新的更改更新拉取请求: git push origin vNext_promotion 返回此处，以完成拉取请求git</li>\n</ul>\n<p><a href=\"mailto:zzb0b0@126.com\" target=\"_blank\" rel=\"external\">@咪醤</a></p>\n","excerpt":"","more":"<h1 id=\"初始化git环境\"><a href=\"#初始化git环境\" class=\"headerlink\" title=\"初始化git环境\"></a>初始化git环境</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>windows平台下载安装 [<a href=\"https://git-for-windows.github.io/\">https://git-for-windows.github.io/</a>]</li>\n<li><code>git --help git</code> git帮助文档</li>\n</ul>\n<h2 id=\"设置提交者识别信息\"><a href=\"#设置提交者识别信息\" class=\"headerlink\" title=\"设置提交者识别信息\"></a>设置提交者识别信息</h2><ul>\n<li><p>设置全局Name和Email地址</p>\n<blockquote>\n<p>git config –global user.name “Your Name” git config –global user.email “email@example.com”</p>\n</blockquote>\n</li>\n<li><p>也可以给指定项目单独设置信息</p>\n<blockquote>\n<p>git config user.name “Your Name” git config user.email “email@example.com” git config –list 查看配置信息</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"创建工作区域\"><a href=\"#创建工作区域\" class=\"headerlink\" title=\"创建工作区域\"></a>创建工作区域</h2><ul>\n<li>mkdir HtmlCode 创建工作区</li>\n<li>cd HtmlCode 进入文件夹</li>\n<li>pwd 显示当前目录</li>\n</ul>\n<h2 id=\"创建本地仓库\"><a href=\"#创建本地仓库\" class=\"headerlink\" title=\"创建本地仓库\"></a>创建本地仓库</h2><ul>\n<li><code>git init</code> 在工作区创建git管理仓库</li>\n<li><code>git clone [url] D://HtmlCode</code> 克隆远程版本库并更名</li>\n</ul>\n<h1 id=\"简约工作流\"><a href=\"#简约工作流\" class=\"headerlink\" title=\"简约工作流\"></a>简约工作流</h1><p>你的本地仓库由 git 维护的三棵”树”组成。第一个是你的「工作目录」，它持有实际文件；第二个是「缓存区（Index）」，临时保存你的改动；最后是「HEAD」，指向你最近一次提交后的结果。</p>\n<ul>\n<li><code>git status</code> 查看当前仓库实时状态</li>\n<li><code>git diff</code> 查看变更内容</li>\n<li><code>git add .</code> 指明要追踪文件，把目标文件放入暂存区域</li>\n<li><code>git commit -m &quot;说明话术&quot;</code> 现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库</li>\n<li><code>git push</code> 推送到远程服务器</li>\n</ul>\n<h1 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h1><h2 id=\"查看提交记录\"><a href=\"#查看提交记录\" class=\"headerlink\" title=\"查看提交记录\"></a>查看提交记录</h2><ul>\n<li><code>git log</code> 查看提交历史</li>\n<li><code>git log --oneline</code></li>\n<li><code>git reflog</code> 查看命令历史，以便回到未来的版本</li>\n</ul>\n<h2 id=\"清理untracked文件\"><a href=\"#清理untracked文件\" class=\"headerlink\" title=\"清理untracked文件\"></a>清理untracked文件</h2><ul>\n<li><code>git clean -f</code> 删除所有 untracked 文件</li>\n<li><code>git clean -fd</code> 连同 untracked 目录一并删除 <em>建议删除前加上 -n 预览会删除哪些文件，以免误删</em> <code>git clear -nfd</code></li>\n</ul>\n<h2 id=\"回退文件\"><a href=\"#回退文件\" class=\"headerlink\" title=\"回退文件\"></a>回退文件</h2><p><img src=\"git-stage.png\" alt=\"工作区、版本库、暂存区原理图\"></p>\n<ul>\n<li><code>git checkout -- &lt;file1&gt; &lt;file2&gt;</code> 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动,已添加到缓存区的改动，以及新文件，都不受影响</li>\n<li><code>git checkout -f</code> 丢弃工作区、缓存区所有修改。清除commit之前的所有修改</li>\n<li><code>git checkout &lt;commitID&gt;</code> 干净的版本回退，将丢弃工作区、缓存区所有修改</li>\n<li><code>git checkout HEAD &lt;file&gt;</code> 从最新的版本替换工作区文件</li>\n<li><code>git reset --soft HEAD^</code> 从最新版本库回退到工作区</li>\n<li><p><code>git reset --soft &lt;commitID&gt;</code> 从最新版本库回退到工作区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">--soft – 缓存区和工作目录都不会被改变</div><div class=\"line\">--mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响</div><div class=\"line\">--hard – 缓存区和工作目录都同步到你指定的提交</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>git reset &lt;commit_id&gt;</code> 在历史版本间回滚，消除commit信息，文件放回工作区</p>\n</li>\n<li><code>git rm --cached &lt;file1&gt; &lt;file2&gt;</code> 直接从暂存区删除文件，工作区则不做出改变</li>\n</ul>\n<h1 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h1><h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><ul>\n<li><code>git fetch –p</code> 更新分支列表</li>\n<li><code>git branch</code> 查看当前分支，当前分支前面会标一个「*」</li>\n<li><code>git branch -r</code> 查看远程分支</li>\n<li><code>git branch -a</code> 查看所有分支</li>\n<li><code>git branch -va</code> 查看所有分支+log</li>\n<li><code>git branch &lt;branch&gt;</code> 创建分支</li>\n<li><code>git checkout &lt;branch&gt;</code> 切换分支</li>\n<li><code>git checkout -b &lt;branch&gt;</code> 创建+切换分支</li>\n<li><code>git merge &lt;branch&gt;</code> 合并某分支到当前分支</li>\n<li><code>git branch -D &lt;branch&gt;</code> 删除某分支</li>\n</ul>\n<h2 id=\"远程分支管理\"><a href=\"#远程分支管理\" class=\"headerlink\" title=\"远程分支管理\"></a>远程分支管理</h2><h3 id=\"查看远程分支\"><a href=\"#查看远程分支\" class=\"headerlink\" title=\"查看远程分支\"></a>查看远程分支</h3><ul>\n<li><code>git fetch</code> 将远程分支信息获取到本地</li>\n<li><code>git branch -r</code> 查看远程分支 <code>git fetch</code></li>\n<li><p><code>git branch -ar</code> 查看本地+远程分支及最后一次log</p>\n<h4 id=\"从远程分支开新分支\"><a href=\"#从远程分支开新分支\" class=\"headerlink\" title=\"从远程分支开新分支\"></a>从远程分支开新分支</h4></li>\n<li><p><code>git checkout -b &lt;localBranch&gt; &lt;remotes/origin/remoteBranch&gt;</code> 远程分支映射到本地分支</p>\n<h4 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"pull\"></a>pull</h4></li>\n<li><p><code>git pull origin &lt;remoteBranch&gt;:&lt;localBranch&gt;</code> 将远程某分支与指定的本地分支合并</p>\n</li>\n<li><p><code>git pull origin &lt;remoteBranch&gt;</code> 将远程某分支与当前分支合并</p>\n<h4 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h4></li>\n<li><p><code>git push &lt;origin&gt; &lt;localBranch&gt;:&lt;remoteBranch&gt;</code> 本地分支推送到远程分支，如果远程不存在此分支则会被新建</p>\n</li>\n<li><code>git branch --set-upstream-to=origin/&lt;branch&gt;</code> 本地当前分支与远程分支建立追踪关系</li>\n<li><code>git branch -vv</code> 查看追踪关系</li>\n<li><code>git push &lt;origin&gt;</code> 如果当前分支与远程分支存在追踪关系，则可直接push到主机</li>\n<li><code>git push</code> 如果当前分支有且只有一个追踪分支，那么主机名亦可省略</li>\n<li><p><code>git push -u origin &lt;branch&gt;</code> 将本地分支推送到远程分支同时指定默认主机，之后不用加任何参数直接使用 <code>git push</code></p>\n</li>\n<li><blockquote>\n<p>git branch -D branch git push origin :remoteBranch</p>\n</blockquote>\n<p>推送时省略本地分支则会删除指定的远程的分支 *注意不要省略<code>:</code>前的空格</p>\n</li>\n</ul>\n<h1 id=\"git-flow\"><a href=\"#git-flow\" class=\"headerlink\" title=\"git flow\"></a>git flow</h1><p><strong>HotFix</strong> 及 <strong>紧急上线</strong> 流程参照沙洲邮件</p>\n<h2 id=\"紧急上线\"><a href=\"#紧急上线\" class=\"headerlink\" title=\"紧急上线\"></a>紧急上线</h2><ol>\n<li><code>git checkout -b bug_xxx remotes/origin/master</code> 从远程master分支创建bug_分支（切换分支时建议关闭VS）</li>\n<li>本地开发-完成 （新资源通常需要包含进VS项目中）</li>\n<li>无法获取时，请先保存本地代码 <code>git stash</code></li>\n<li><code>git pull origin master</code> 拉取最新代码到本地</li>\n<li>将 <code>stash</code> 的代码 <code>git stash pop</code> 恢复到工作区</li>\n<li><code>git add .</code> <code>git commit -m &quot;话术&quot;</code> commit 本次更改，不是自己更改的文件不要提交</li>\n<li><code>git push -u origin bug_xxx</code> 推送本分支到远程作为一个远程新分支</li>\n<li><a href=\"https://tfsgit.tujia.com/tfs/Root/_git/tujia/pullrequests\">打开服务器网站</a>，发起「pull request」,将 _bug<em>xxx</em> 合并到 <em>master</em></li>\n<li>合并时再次 review 对比代码确认下都是自己提交。如有冲突等，解决冲突后push&amp;pullRequest，敦促版本管理员处理</li>\n<li>合并结束后前往<a href=\"http://deploy.fvt.tujia.com/EmergentRequest\">BVT部署</a></li>\n<li>测试无误删除服务器bug_xxx分支</li>\n<li>PS. 切换分支的时候建议关闭VS</li>\n</ol>\n<h2 id=\"HotFix\"><a href=\"#HotFix\" class=\"headerlink\" title=\"HotFix\"></a>HotFix</h2><p>见沙洲邮件↓</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">0   接到在vNext上开发feature_1功能的任务</div><div class=\"line\">1   将源代码当前分支切换到vNext上   Git checkout vNext</div><div class=\"line\">2   拉取最新vNext分支 Git pull origin vNext</div><div class=\"line\">3   从本地vNext上创建feature_1分支  Git branch vNext_featue_1 vNext</div><div class=\"line\">4   切换到feature_1分支上 Git checkout vNext_feature_1</div><div class=\"line\">5   本地完成开发，提交到feature_1分支   Git commit</div><div class=\"line\">6   推送本地feature_1分支到服务器 Git push –u origin vNext_feature_1</div><div class=\"line\">7   打开服务器网站，发起pull request请求</div><div class=\"line\">8   选择从feature_1分支合并到vNext分支</div><div class=\"line\">9   管理员审批拉取请求</div><div class=\"line\"></div><div class=\"line\">10  看到自己的拉取请求已完成</div><div class=\"line\">11  删除远程feature_1分支 Git push origin :vNext_feature_1</div><div class=\"line\">12  到部署网站上申请部署fvt测试</div><div class=\"line\">13  协助测试完成fvt测试</div><div class=\"line\">9-&gt;9.1  如果管理员发现合并冲突，拉取请求被拒绝</div><div class=\"line\">10.1    切换到vNext分支  Git checkout vNext</div><div class=\"line\">11.1    获取最新vNext信息 Git pull origin vNext</div><div class=\"line\">12.1    切换到feature_1分支  Git checkout vNext_feature_1</div><div class=\"line\">13.1    本地合并vNext和feature_1 Git merge vNext</div><div class=\"line\">14.1    提交合并结果  Git commit</div><div class=\"line\">15.1    重复6~13步骤</div><div class=\"line\">13-&gt;13.2    如测试发现有bug， fvt测试不通过</div><div class=\"line\">14.2    重复1~13步骤</div></pre></td></tr></table></figure>\n<h1 id=\"解决-pullRequest-冲突\"><a href=\"#解决-pullRequest-冲突\" class=\"headerlink\" title=\"解决 pullRequest 冲突\"></a>解决 pullRequest 冲突</h1><p>eg. vNext_promotion 合并到 vNext 时冲突</p>\n<ul>\n<li>首先，你将需要确保 vNext_promotion 和 vNext 分支是最新的: git fetch origin git checkout -b vNext_promotion origin/vNext_promotion</li>\n<li>接下来，将 vNext 中的更改合并到 vNext_promotion 中，并解决冲突: git checkout vNext_promotion git merge origin/vNext</li>\n<li>然后，在生成和测试代码后，用最新的更改更新拉取请求: git push origin vNext_promotion 返回此处，以完成拉取请求git</li>\n</ul>\n<p><a href=\"mailto:zzb0b0@126.com\">@咪醤</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}